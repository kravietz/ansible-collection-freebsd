---
- name: Create combined users variable
  ansible.builtin.set_fact:
    freebsd_combined_users: "{{ freebsd_users_global | default([]) }}"
  tags: user

- name: Combine global and group users
  when: freebsd_users_group is defined
  ansible.builtin.set_fact:
    freebsd_combined_users: "{{ freebsd_combined_users + freebsd_users_group }}"
  tags: user

- name: Combine global and host users
  when: freebsd_users_host is defined
  ansible.builtin.set_fact:
    freebsd_combined_users: "{{ freebsd_combined_users + freebsd_users_host }}"
  tags: user

- name: Ensure groups
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.uid }}"
  loop: "{{ freebsd_combined_users }}"
  tags: user

- name: Ensure users
  ansible.builtin.user:
    name: "{{ item.name }}"
    groups: "{{ item.groups | default(item.name) }}"
    append: true # append to the above groups, not remove from others
    shell: "{{ item.shell | default('/bin/sh') }}"
    uid: "{{ item.uid }}"
    expires: -1
    password_lock: "{{ item.password_lock | default(False) }}"
  loop: "{{ freebsd_combined_users }}"
  tags: user

- name: Ensure users in sudoers
  when: item.sudo | default(False)
  community.general.sudoers:
    name: "{{ item.name }}"
    user: "{{ item.name }}"
    commands: ALL
    runas: ALL
    nopassword: "{{ item.sudo_nopassword | default(False) }}"
    sudoers_path: /usr/local/etc/sudoers.d
  loop: "{{ freebsd_combined_users }}"
  tags: user

- name: Ensure ssh keys
  ansible.posix.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
  with_subelements:
    - "{{ freebsd_combined_users }}"
    - sshkeys # TODO: handle when no sshkeys property is defined
  tags: user
